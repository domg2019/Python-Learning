from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)
# app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///tickets.db'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////opt/myapp/tickets.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)


class Category(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), unique=True, nullable=False)
    tickets = db.relationship('Ticket', backref='category', lazy=True)

class Ticket(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.String(200), nullable=False)
    category_id = db.Column(db.Integer, db.ForeignKey('category.id'), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    details = db.relationship('TicketDetail', backref='ticket', lazy=True)  # 新增关联

class TicketDetail(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    ticket_id = db.Column(db.Integer, db.ForeignKey('ticket.id'), nullable=False)
    field_name = db.Column(db.String(50), nullable=False)  # 字段名称（如Partner Info）
    field_value = db.Column(db.String(500), nullable=False) # 字段值
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        # 处理分类添加
        if 'new_category' in request.form:
            new_category = request.form['new_category']
            if not Category.query.filter_by(name=new_category).first():
                db.session.add(Category(name=new_category))
                db.session.commit()

        # 处理Ticket添加
        elif 'ticket_content' in request.form:
            content = request.form['ticket_content']
            category_id = request.form['category_id']
            # 检查是否已存在相同的 Ticket
            existing_ticket = Ticket.query.filter_by(content=content, category_id=category_id).first()
            if not existing_ticket and content.strip():  # 检查内容是否为空且不重复
                db.session.add(Ticket(content=content, category_id=category_id))
                db.session.commit()

    categories = Category.query.all()
    return render_template('index.html', categories=categories)

@app.route('/add_detail/<int:ticket_id>', methods=['POST'])
def add_detail(ticket_id):
    ticket = Ticket.query.get(ticket_id)
    if ticket:
        field_name = request.form.get('field_name')
        field_value = request.form.get('field_value')
        if field_name and field_value:
            detail = TicketDetail(
                ticket_id=ticket_id,
                field_name=field_name,
                field_value=field_value
            )
            db.session.add(detail)
            db.session.commit()
    return redirect(url_for('index'))

@app.route('/delete_detail/<int:detail_id>')
def delete_detail(detail_id):
    detail = TicketDetail.query.get(detail_id)
    if detail:
        db.session.delete(detail)
        db.session.commit()
    return redirect(url_for('index'))

@app.route('/delete/<int:ticket_id>')
def delete_ticket(ticket_id):
    ticket = Ticket.query.get(ticket_id)
    if ticket:
        db.session.delete(ticket)
        db.session.commit()
    return redirect(url_for('index'))

@app.route('/delete_category/<int:category_id>')
def delete_category(category_id):
    category = Category.query.get(category_id)
    if category:
        # 先删除关联的 Tickets
        Ticket.query.filter_by(category_id=category_id).delete()
        # 再删除分类
        db.session.delete(category)
        db.session.commit()
    return redirect(url_for('index'))


if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(host='0.0.0.0', port=5000, debug=True)